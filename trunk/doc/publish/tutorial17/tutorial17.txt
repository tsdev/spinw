<div class="content"><h2>Contents</h2><div><ul><li><a href="#1">Symbolic spin wave dispersion of FM chain</a></li><li><a href="#2">Magnetic Hamiltonian</a></li><li><a href="#3">Magnetic structure</a></li><li><a href="#4">Spin wave dispersion</a></li><li><a href="#5">Plot spin wave spectrum</a></li></ul></div><h2>Symbolic spin wave dispersion of FM chain<a name="1"></a></h2><p>To prepare for symbolic calculation we will need the Matlab Symbolic Toolbox. The symbolic mode should be switched on just after the sw object is created using the sw.symbolic(true) function. The lattice (lattice constants, angles, atomic positions) will still have numerical values. However the spins will be symbolic automatically, see below. The sw.unit_cell.S variable will belong to the 'sym' class, that is defined by the Symbolic Toolbox.</p><pre class="codeinput">FMchain = sw;
FMchain.fileid(0)
FMchain.symbolic(true)

FMchain.genlattice(<span class="string">'lat_const'</span>,[3 4 4])
FMchain.addatom(<span class="string">'label'</span>,<span class="string">'A1'</span>,<span class="string">'r'</span>,[0 0 0],<span class="string">'S'</span>,1)
disp(<span class="string">'Symbolic spin value:'</span>)
FMchain.unit_cell.S
FMchain.gencoupling
</pre><pre class="codeoutput">Symbolic spin value:
 
ans =
 
S_1
 
</pre><h2>Magnetic Hamiltonian<a name="2"></a></h2><p>When we define the magnetic Hamiltonian, the sw.matrix.mat matrix will contain symbolic values. The values will be the symbolic variable created from the 'label' option and the 'value' matrix. If the input for the 'value' option is symbolic, then it is directly assigned to the sw.matrix.mat field. For the sw.addcoupling(), sw.addaniso(), sw.addg() functions the 'label' value of the matrix has to be used instead of the stored symbolic values. It simplifies the calculation if appropriate assumptions are given for the symbolic variables. In our case, we assume J is positive and use -J for the coupling.</p><pre class="codeinput">FMchain.addmatrix(<span class="string">'label'</span>,<span class="string">'J1'</span>,<span class="string">'value'</span>,1/2)
disp(<span class="string">'Symbolic matrix value from double type input:'</span>)
FMchain.matrix.mat

FMchain.addmatrix(<span class="string">'label'</span>,<span class="string">'J1'</span>,<span class="string">'value'</span>,-sym(<span class="string">'J'</span>,<span class="string">'positive'</span>))
disp(<span class="string">'Symbolic matrix value from symbolic input:'</span>)
FMchain.matrix.mat

FMchain.addcoupling(<span class="string">'J1'</span>,1)
plot(FMchain,<span class="string">'range'</span>,[3 0.5 0.5])
</pre><pre class="codeoutput">Symbolic matrix value from double type input:
 
ans =
 
[ J1/2,    0,    0]
[    0, J1/2,    0]
[    0,    0, J1/2]
 
Symbolic matrix value from symbolic input:
 
ans =
 
[ -J,  0,  0]
[  0, -J,  0]
[  0,  0, -J]
 
</pre><img vspace="5" hspace="5" src="%ATTACHURLPATH%/tutorial17_01.png" alt=""> <h2>Magnetic structure<a name="3"></a></h2><p>We can define the magnetic structure as usuall. The normalized symbolic spin components will be created. Beside the magnetic structure can be also created using symbolic input variables, for example incommensurate k-vector, etc.</p><pre class="codeinput">FMchain.genmagstr(<span class="string">'mode'</span>,<span class="string">'helical'</span>,<span class="string">'S'</span>,[0 1 0])
FMchain.magtable.M
plot(FMchain,<span class="string">'range'</span>,[3 0.5 0.5],<span class="string">'zoom'</span>,1)
</pre><pre class="codeoutput"> 
ans =
 
   0
 S_1
   0
 
</pre><img vspace="5" hspace="5" src="%ATTACHURLPATH%/tutorial17_02.png" alt=""> <h2>Spin wave dispersion<a name="4"></a></h2><p>For symbolic mode, only the spin wave dispersion can be calculated calling the sw.spinwave function. It produces the general dispersion withouth any additional input. We note that the final result is not in a nice form, but this is the limitation of the simplify() function of the symbolic  engine.</p><pre class="codeinput">FMspec = FMchain.spinwave();
pretty(FMspec.omega)
</pre><pre class="codeoutput">/                                          2 \
|  J S_1 exp(-pi h 2 i) (exp(pi h 2 i) - 1)  |
|                                            |
|                                          2 |
\ -J S_1 exp(-pi h 2 i) (exp(pi h 2 i) - 1)  /

</pre><h2>Plot spin wave spectrum<a name="5"></a></h2><p>For plotting we need to calculate the spin wave spectrum at given Q point, here along the (H,0,0) direction using the eval() function.</p><pre class="codeinput">h   = linspace(0,1,501);
J   = 1;
S_1 = 1;
w = real(eval(FMspec.omega(2)));

figure
plot(h,w)
xlabel(<span class="string">'(H,0,0) in r.l.u.'</span>)
ylabel(<span class="string">'Energy (meV)'</span>)
title(<span class="string">'Spin wave dispersion of FM chain, J = -1, S = 1'</span>,<span class="string">'fontsize'</span>,15)
</pre><img vspace="5" hspace="5" src="%ATTACHURLPATH%/tutorial17_03.png" alt=""> <pre>Written by
Sandor Toth
16-June-2014</pre><p class="footer"><br><a href="http://www.mathworks.com/products/matlab/">Published with MATLAB&reg; R2014a</a><br></p></div><!--
<literal>##### SOURCE BEGIN #####
%% Symbolic spin wave dispersion of FM chain
% To prepare for symbolic calculation we will need the Matlab Symbolic
% Toolbox. The symbolic mode should be switched on just after the sw object
% is created using the sw.symbolic(true) function. The lattice (lattice
% constants, angles, atomic positions) will still have numerical values.
% However the spins will be symbolic automatically, see below. The
% sw.unit_cell.S variable will belong to the 'sym' class, that is defined
% by the Symbolic Toolbox.

FMchain = sw;
FMchain.fileid(0)
FMchain.symbolic(true)

FMchain.genlattice('lat_const',[3 4 4])
FMchain.addatom('label','A1','r',[0 0 0],'S',1)
disp('Symbolic spin value:')
FMchain.unit_cell.S
FMchain.gencoupling

%% Magnetic Hamiltonian
% When we define the magnetic Hamiltonian, the sw.matrix.mat matrix will
% contain symbolic values. The values will be the symbolic variable created
% from the 'label' option and the 'value' matrix. If the input for the
% 'value' option is symbolic, then it is directly assigned to the
% sw.matrix.mat field. For the sw.addcoupling(), sw.addaniso(), sw.addg()
% functions the 'label' value of the matrix has to be used instead of the
% stored symbolic values. It simplifies the calculation if appropriate
% assumptions are given for the symbolic variables. In our case, we assume
% J is positive and use -J for the coupling.

FMchain.addmatrix('label','J1','value',1/2)
disp('Symbolic matrix value from double type input:')
FMchain.matrix.mat

FMchain.addmatrix('label','J1','value',-sym('J','positive'))
disp('Symbolic matrix value from symbolic input:')
FMchain.matrix.mat

FMchain.addcoupling('J1',1)
plot(FMchain,'range',[3 0.5 0.5])

%% Magnetic structure
% We can define the magnetic structure as usuall. The normalized symbolic
% spin components will be created. Beside the magnetic structure can be
% also created using symbolic input variables, for example incommensurate
% k-vector, etc.

FMchain.genmagstr('mode','helical','S',[0 1 0])
FMchain.magtable.M
plot(FMchain,'range',[3 0.5 0.5],'zoom',1)

%% Spin wave dispersion
% For symbolic mode, only the spin wave dispersion can be calculated
% calling the sw.spinwave function. It produces the general dispersion
% withouth any additional input. We note that the final result is not in a
% nice form, but this is the limitation of the simplify() function of the
% symbolic  engine.

FMspec = FMchain.spinwave();
pretty(FMspec.omega)

%% Plot spin wave spectrum
% For plotting we need to calculate the spin wave spectrum at given Q
% point, here along the (H,0,0) direction using the eval() function.

h   = linspace(0,1,501);
J   = 1;
S_1 = 1;
w = real(eval(FMspec.omega(2)));

figure
plot(h,w)
xlabel('(H,0,0) in r.l.u.')
ylabel('Energy (meV)')
title('Spin wave dispersion of FM chain, J = -1, S = 1','fontsize',15)

%%
%  Written by
%  Sandor Toth
%  16-June-2014
##### SOURCE END #####</literal>
-->