<div class="content"><h2>Contents</h2><div><ul><li><a href="#1">Antiferromagnetic square lattice</a></li><li><a href="#2">Couplings</a></li><li><a href="#3">Magnetic structure</a></li><li><a href="#4">Spin wave spectrum</a></li></ul></div><h2>Antiferromagnetic square lattice<a name="1"></a></h2><p>We define a square lattice in the ab plane, with Cu+ ions with S=1 spin.</p><pre class="codeinput">AFsq = sw;
AFsq.fileid(0)
AFsq.genlattice(<span class="string">'lat_const'</span>,[3 3 10],<span class="string">'angled'</span>,[90 90 90],<span class="string">'sym'</span>,0)
AFsq.addatom(<span class="string">'r'</span>,[0 0 0],<span class="string">'S'</span>, 1,<span class="string">'label'</span>,<span class="string">'Cu1'</span>,<span class="string">'color'</span>,<span class="string">'b'</span>);
display(<span class="string">'Atomic positions as columns:'</span>)
AFsq.atom.r
plot(AFsq)
</pre><pre class="codeoutput">Atomic positions as columns:

ans =

     0
     0
     0

</pre><img vspace="5" hspace="5" src="%ATTACHURLPATH%/tutorial4_01.png" alt=""> <h2>Couplings<a name="2"></a></h2><p>We create first neighbor couplings in the ab plane and plot the bonds. You can click on the different bonds to get the value of the corresponding matrix.</p><pre class="codeinput">AFsq.gencoupling(<span class="string">'maxDistance'</span>,9)
display(<span class="string">'Rows: dlx, dly, dlz, at1, at2, idx, ma1, ma2, ma3'</span>)
AFsq.couplingtable.table
AFsq.coupling
display(<span class="string">'Bond vectors (first three rows) and bond distances'</span>)
AFsq.couplingtable.bondv

AFsq.addmatrix(<span class="string">'label'</span>,<span class="string">'J1'</span>,<span class="string">'value'</span>,1,<span class="string">'color'</span>,<span class="string">'red'</span>)
AFsq.addmatrix(<span class="string">'label'</span>,<span class="string">'J2'</span>,<span class="string">'value'</span>,-0.1,<span class="string">'color'</span>,<span class="string">'green'</span>)
AFsq.addcoupling(<span class="string">'J1'</span>,1)
AFsq.addcoupling(<span class="string">'J2'</span>,2)
plot(AFsq,<span class="string">'range'</span>,[2 2 0.5],<span class="string">'zoom'</span>,-1)
</pre><pre class="codeoutput">Rows: dlx, dly, dlz, at1, at2, idx, ma1, ma2, ma3

ans =

  Columns 1 through 6

           1           0           1           1           2           0
           0           1          -1           1           0           2
           0           0           0           0           0           0
           1           1           1           1           1           1
           1           1           1           1           1           1
           1           1           2           2           3           3
           0           0           0           0           0           0
           0           0           0           0           0           0
           0           0           0           0           0           0

  Columns 7 through 12

           1           1           2           2           2           2
          -2           2          -1           1          -2           2
           0           0           0           0           0           0
           1           1           1           1           1           1
           1           1           1           1           1           1
           4           4           4           4           5           5
           0           0           0           0           0           0
           0           0           0           0           0           0
           0           0           0           0           0           0

  Columns 13 through 14

           3           0
           0           3
           0           0
           1           1
           1           1
           6           6
           0           0
           0           0
           0           0


ans = 

         dl: [3x14 int32]
      atom1: [1 1 1 1 1 1 1 1 1 1 1 1 1 1]
      atom2: [1 1 1 1 1 1 1 1 1 1 1 1 1 1]
        idx: [1 1 2 2 3 3 4 4 4 4 5 5 6 6]
    mat_idx: [3x14 int32]

Bond vectors (first three rows) and bond distances

ans =

  Columns 1 through 7

    1.0000         0    1.0000    1.0000    2.0000         0    1.0000
         0    1.0000   -1.0000    1.0000         0    2.0000   -2.0000
         0         0         0         0         0         0         0
    3.0000    3.0000    4.2426    4.2426    6.0000    6.0000    6.7082

  Columns 8 through 14

    1.0000    2.0000    2.0000    2.0000    2.0000    3.0000         0
    2.0000   -1.0000    1.0000   -2.0000    2.0000         0    3.0000
         0         0         0         0         0         0         0
    6.7082    6.7082    6.7082    8.4853    8.4853    9.0000    9.0000

</pre><img vspace="5" hspace="5" src="%ATTACHURLPATH%/tutorial4_02.png" alt=""> <h2>Magnetic structure<a name="3"></a></h2><p>For weak second neighbor ferromagnetic interaction the magnetic structure is Neel type, with the following parameters:</p><div><ul><li>ordering wave vector k = (1/2 1/2 0)</li><li>spin are in arbitrary plane, lets point along the S = (1 0 0) direction</li><li>normal to the spin vectors n = (0 0 1)</li><li>magnetic supercell is 2x2x1</li></ul></div><p>We use magnetic supercell, since the 2*k equal to a reciprocal lattice vector. In this case the spin wave code cannot use the incommensurate mode, thus we have to create a zero-k structure, that is a 2x2x1 magnetic supercell.Note that the sw.genmagstr() automatically normalizes the spin vectors to the spin value of the magnetic atoms.</p><pre class="codeinput">AFsq.genmagstr(<span class="string">'mode'</span>,<span class="string">'helical'</span>,<span class="string">'k'</span>,[1/2 1/2 0],<span class="string">'n'</span>,[0 0 1], <span class="string">'S'</span>,[1; 0; 0],<span class="string">'nExt'</span>,[2 2 1]);
display(<span class="string">'Magnetic structure with spins 1 2 ... as columns, xyz as rows:'</span>)
AFsq.mag_str
AFsq.mag_str.S
display(<span class="string">'Magnetic atoms as columns:'</span>)
AFsq.magtable.R
display(<span class="string">'Magnetic spins:'</span>)
AFsq.magtable.M
display(<span class="string">'Ground state energy (meV/spin)'</span>)
AFsq.energy
plot(AFsq,<span class="string">'range'</span>,[2 2 1])
</pre><pre class="codeoutput">Magnetic structure with spins 1 2 ... as columns, xyz as rows:

ans = 

    N_ext: [2 2 1]
        k: [0.5000 0.5000 0]
        S: [3x4 double]
        n: [0 0 1]


ans =

    1.0000   -1.0000   -1.0000    1.0000
         0    0.0000    0.0000   -0.0000
         0         0         0         0

Magnetic atoms as columns:

ans =

     0     1     0     1
     0     0     1     1
     0     0     0     0

Magnetic spins:

ans =

    1.0000   -1.0000   -1.0000    1.0000
         0    0.0000    0.0000   -0.0000
         0         0         0         0

Ground state energy (meV/spin)

ans =

   -2.2000

</pre><img vspace="5" hspace="5" src="%ATTACHURLPATH%/tutorial4_03.png" alt=""> <h2>Spin wave spectrum<a name="4"></a></h2><p>We calculate the spin wave spectrum and correlatino function along several linear q-scans in reciprocal space defined by the Qcorner corner points. The last number in the cell defines the number of steps in each linear scan.</p><pre class="codeinput">Qcorner = {[1/4 3/4 0] [1/2 1/2 0] [1/2 0 0] [3/4 1/4 0] [1 0 0] [3/2 0 0] 100};
sqSpec = AFsq.spinwave(Qcorner, <span class="string">'hermit'</span>, false);
sqSpec = sw_neutron(sqSpec);
sqSpec = sw_egrid(sqSpec,<span class="string">'Evect'</span>,linspace(0,6.5,500));
sw_plotspec(sqSpec,<span class="string">'mode'</span>,3,<span class="string">'dashed'</span>,true,<span class="string">'dE'</span>,0.25)
</pre><img vspace="5" hspace="5" src="%ATTACHURLPATH%/tutorial4_04.png" alt=""> <pre>Written by
Bjorn Fak &amp; Sandor Toth
06-June-2014</pre><p class="footer"><br><a href="http://www.mathworks.com/products/matlab/">Published with MATLAB&reg; R2013b</a><br></p></div><!--
<literal>##### SOURCE BEGIN #####
%% Antiferromagnetic square lattice
% We define a square lattice in the ab plane, with Cu+ ions with S=1 spin.

AFsq = sw; 
AFsq.fileid(0)
AFsq.genlattice('lat_const',[3 3 10],'angled',[90 90 90],'sym',0)
AFsq.addatom('r',[0 0 0],'S', 1,'label','Cu1','color','b');
display('Atomic positions as columns:') 
AFsq.atom.r 
plot(AFsq)

%% Couplings
% We create first neighbor couplings in the ab plane and plot the bonds.
% You can click on the different bonds to get the value of the
% corresponding matrix.

AFsq.gencoupling('maxDistance',9)
display('Rows: dlx, dly, dlz, at1, at2, idx, ma1, ma2, ma3')
AFsq.couplingtable.table
AFsq.coupling
display('Bond vectors (first three rows) and bond distances')
AFsq.couplingtable.bondv

AFsq.addmatrix('label','J1','value',1,'color','red')
AFsq.addmatrix('label','J2','value',-0.1,'color','green')
AFsq.addcoupling('J1',1)
AFsq.addcoupling('J2',2)
plot(AFsq,'range',[2 2 0.5],'zoom',-1)

%% Magnetic structure
% For weak second neighbor ferromagnetic interaction the magnetic structure
% is Neel type, with the following parameters:
%
% * ordering wave vector k = (1/2 1/2 0)
% * spin are in arbitrary plane, lets point along the S = (1 0 0) direction
% * normal to the spin vectors n = (0 0 1)
% * magnetic supercell is 2x2x1
%
% We use magnetic supercell, since the 2*k equal to a reciprocal lattice
% vector. In this case the spin wave code cannot use the incommensurate
% mode, thus we have to create a zero-k structure, that is a 2x2x1 magnetic
% supercell.Note that the sw.genmagstr() automatically normalizes the spin
% vectors to the spin value of the magnetic atoms.

AFsq.genmagstr('mode','helical','k',[1/2 1/2 0],'n',[0 0 1], 'S',[1; 0; 0],'nExt',[2 2 1]);  
display('Magnetic structure with spins 1 2 ... as columns, xyz as rows:')
AFsq.mag_str 
AFsq.mag_str.S
display('Magnetic atoms as columns:')
AFsq.magtable.R
display('Magnetic spins:')
AFsq.magtable.M
display('Ground state energy (meV/spin)')
AFsq.energy
plot(AFsq,'range',[2 2 1])

%% Spin wave spectrum
% We calculate the spin wave spectrum and correlatino function along
% several linear q-scans in reciprocal space defined by the Qcorner corner
% points. The last number in the cell defines the number of steps in each
% linear scan.

Qcorner = {[1/4 3/4 0] [1/2 1/2 0] [1/2 0 0] [3/4 1/4 0] [1 0 0] [3/2 0 0] 100};
sqSpec = AFsq.spinwave(Qcorner, 'hermit', false);
sqSpec = sw_neutron(sqSpec); 
sqSpec = sw_egrid(sqSpec,'Evect',linspace(0,6.5,500));
sw_plotspec(sqSpec,'mode',3,'dashed',true,'dE',0.25)

%%
%  Written by
%  Bjorn Fak & Sandor Toth
%  06-June-2014
##### SOURCE END #####</literal>
-->